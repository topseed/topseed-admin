doctype html
html
	head
		// Standard Meta
		meta(charset='utf-8')
		meta(http-equiv='X-UA-Compatible', content='IE=edge,chrome=1')
		meta(name='viewport', content='width=device-width, initial-scale=1.0, maximum-scale=1.0')
		// Site Properties
		title Grid Example - Semantic
		link(rel='stylesheet', type='text/css', href='../dist/components/reset.css')
		link(rel='stylesheet', type='text/css', href='../dist/components/site.css')
		link(rel='stylesheet', type='text/css', href='../dist/components/container.css')
		link(rel='stylesheet', type='text/css', href='../dist/components/divider.css')
		link(rel='stylesheet', type='text/css', href='../dist/components/grid.css')
		link(rel='stylesheet', type='text/css', href='../dist/components/header.css')
	body
		.ui.text.container
			h1.ui.dividing.header Using Grids
			h3.first Container
			p
				| A container is a fixed width element that wraps your site's content. It remains a constant size and uses 
				b margin
				|  to center. Containers are the simplest way to center page content inside a grid.
		.ui.container
			.ui.grid
				.column
				.column
				.column
				.column
				.column
				.column
				.column
				.column
				.column
				.column
				.column
				.column
				.column
				.column
				.column
				.column
		.ui.text.container
			h3.first Text Container
			p
				| Sometimes you just need to put a single column of centered text on a page. A 
				code text container
				|  is a special type of container optimized for a single flowing column of text, like this instructions on this page.
			p
				| Text containers 
				b do not need to use grids
				|  and help simplify basic page layouts.
		.ui.text.container
			.ui.one.column.grid
				.column
		.ui.text.container
			h1.ui.dividing.header Grid Content
			h3.first Column Flow
			p
				| A grid does not necessarily need to specify rows. If you include 
				code columns
				|  as direct child of 
				code ui grid
				|  content will automatically flow to the next row when all the grid columns are taken in the current row.
			.ui.grid
				.four.wide.column
				.four.wide.column
				.four.wide.column
				.four.wide.column
				.four.wide.column
				.four.wide.column
				.four.wide.column
				.four.wide.column
			h3 Clearing Rows
			p Adding row wrappers allow you to manually specify you want a new row to begin.
			.ui.three.column.grid
				.column
				.row
					.column
					.column
					.column
			h3 Specifying Row Width
			p
				| Specifying a grid column count will divide columns into rows of predetermined column count. Additional columns will automatically flow to the next row.
			.ui.three.column.grid
				.column column
				.column column
				.column column
				.column column
				.column column
				.column column
			h3 Specifying Column Width
			p You can also specify column widths for each column individually
			.ui.three.column.grid
				.four.wide.column four wide column
				.eight.wide.column eight wide column
				.four.wide.column four wide column
			h3 Special Variations
			p
				| Some special variations that format grids like tables require you to specify rows. For example a 
				code divided grid
				|  or a 
				code celled grid
				|  requires row wrappers.
			.ui.horizontal.section.divider Celled Grid
			.ui.celled.grid
				.row
					.four.wide.column
					.four.wide.column
					.four.wide.column
					.four.wide.column
				.row
					.four.wide.column
					.four.wide.column
					.four.wide.column
					.four.wide.column
			.ui.horizontal.section.divider Internally Celled Grid
			.ui.internally.celled.grid
				.row
					.four.wide.column
					.four.wide.column
					.four.wide.column
					.four.wide.column
				.row
					.four.wide.column
					.four.wide.column
					.four.wide.column
					.four.wide.column
			.ui.horizontal.section.divider Divided Grid
			.ui.divided.grid
				.row
					.four.wide.column
					.four.wide.column
					.four.wide.column
					.four.wide.column
				.row
					.four.wide.column
					.four.wide.column
					.four.wide.column
					.four.wide.column
			.ui.horizontal.section.divider Vertically Divided Grid
			.ui.vertically.divided.grid
				.row
					.four.wide.column
					.four.wide.column
					.four.wide.column
					.four.wide.column
				.row
					.four.wide.column
					.four.wide.column
					.four.wide.column
					.four.wide.column
			h1.ui.dividing.header Adjusting Grids
			h3.first Centering Content
			p
				| If a row does not take up all sixteen grid columns, you can use a 
				code ui centered grid
				| , 
				code centered row
				| , or 
				code centered column
				|  to center the column contents inside the grid.
			.ui.two.column.centered.grid
				.column
				.four.column.centered.row
					.column
					.column
			h3 Floating Rows
			p
				| Since Semantic UI's grid is based on flex box, a 
				code left floated
				|  item should come first, and a 
				code right floated
				|  item last in its row.
			.ui.grid
				.left.floated.six.wide.column
					.ui.segment
						| Left floated
				.right.floated.six.wide.column
					.ui.segment
						| Right floated
			h3 Text Alignment
			p
				| You can specify text alignment using alignment variations on a grid, row, or column level.
			.ui.grid
				.right.aligned.eight.wide.column
					| right aligned column
				.left.aligned.eight.wide.column
					| left aligned column
				.center.aligned.two.column.row
					.column
						| center aligned row
					.column
						| center aligned row
				.sixteen.wide.right.aligned.column
					| right aligned column
			h3 Vertical Alignment
			p You can specify vertical alignment on a grid, row, or column level.
			.ui.middle.aligned.four.column.centered.grid
				.row
					.column
						img.ui.wireframe.image(src='assets/images/wireframe/image.png')
					.column
						img.ui.wireframe.image(src='assets/images/wireframe/image.png')
						img.ui.wireframe.image(src='assets/images/wireframe/image.png')
					.column
						img.ui.wireframe.image(src='assets/images/wireframe/image.png')
			h3 Equal Width Columns
			p
				| Specifying an 
				code equal width grid
				|  will automatically determine column sizes to fit evenly inside one row
			.ui.equal.width.grid
				.row
					.column column
					.column column
					.column column
					.column column
				.row
					.column column
					.column column
					.column column
			h1 Responsive Patterns
			h3.first Doubling
			p You can set columns to double in width at each device jump
			.ui.five.column.doubling.grid
				.column column
				.column column
				.column column
				.column column
				.column column
			h3 Stackable
			p You can set columns to stack on mobile
			.ui.three.column.stackable.grid
				.column column
				.column column
				.column column
			h3 Responsive Width Adjustments
			p You can specify columns to appear at different widths on different screens
			.ui.grid
				.eight.wide.mobile.six.wide.tablet.four.wide.computer.column
				.eight.wide.mobile.six.wide.tablet.four.wide.computer.column
				.eight.wide.mobile.six.wide.tablet.four.wide.computer.column
				.eight.wide.mobile.six.wide.tablet.four.wide.computer.column
				.eight.wide.mobile.six.wide.tablet.four.wide.computer.column
			.ui.grid
				.four.wide.two.wide.large.screen.one.wide.widescreen.column
				.four.wide.two.wide.large.screen.one.wide.widescreen.column
				.four.wide.two.wide.large.screen.one.wide.widescreen.column
				.four.wide.two.wide.large.screen.one.wide.widescreen.column
			h3 Specifying Device Visibility
			p You can specify columns to appear only a particular screen
			.ui.grid
				.two.column.computer.only.row
					.ten.wide.column ten wide column computer only
					.six.wide.column six wide column computer only
				.sixteen.wide.mobile.only.column sixteen wide column mobile only
				.three.column.computer.only.row
					.column computer only row
					.column computer only row
					.column computer only row
				.two.column.mobile.only.row
					.column mobile only column
					.column mobile only column
				.two.column.row
					.column column
					.column column
		style(type='text/css').
			/* Some basic formatting */
			code {
			background-color: #E0E0E0;
			padding: 0.25em 0.3em;
			font-family: 'Lato';
			font-weight: bold;
			}
			.container {
			padding: 5em 0em;
			}
			.ui.dividing.header,
			.first {
			margin-top: 5em;
			}
			.ui.dividing.header:first-child {
			margin-top: 0em;
			}
			h1,
			h3 {
			margin-top: 10em;
			}
			img {
			display: block;
			max-width: 100%;
			}
			img + img {
			margin-top: 0.5em;
			}
			/* Shows content box (not negative margins) */
			.grid {
			position: relative;
			}
			.grid:before {
			position: absolute;
			top: 1rem;
			left: 1rem;
			background-color: #F0F0F0;
			content: '';
			width: calc(100% - 2rem);
			height: calc(100% - 2rem);
			box-shadow: 0px 0px 0px 1px #DDDDDD inset;
			}
			.ui.divided.grid:before,
			.celled.grid:before {
			display: none;
			}
			.ui.aligned .column:after {
			display: none !important;
			}
			.grid .column:not(.row):not(.grid):after {
			background-color: rgba(86, 61, 124, .15);
			box-shadow: 0px 0px 0px 1px rgba(86, 61, 124, 0.2) inset;
			content: "";
			display: block;
			min-height: 50px;
			}
			@media only screen and (max-width: 768px) {
			.stackable.grid:before {
			width: 100%;
			left: 0em;
			}
			}
